prac 5

create database marks; 
delimiter ;
use marks; 
create table studmarks(name varchar(20),total_marks integer); 
create table result(roll_no integer,name varchar(20),class varchar(25)); 
delimiter $ 
create procedure proc_grade(in rollno tinyint,in name varchar(15),in marks int) 
begin     -> declare class varchar(25);     -> if marks>=990 and marks<=1500 then set class="Distinction";     -> elseif marks<=989 and marks>=900 then set class="First Class";     -> elseif marks<=899 and marks>=825 then set class="Second Class";     -> elseif marks<=824 and marks>=700 then set class="Pass";     -> else     -> set class="Fail";     -> end if;     -> insert into studmarks values(name,marks);     -> insert into result values(rollno,name,class);     -> end$ 
         
delimiter ; 
call proc_grade(1,"Saurabh",850); 
call proc_grade(2,"Peter",1000); 
call proc_grade(8,"Samarth",834); 
call proc_grade(73,"Pranali",950); 
call proc_grade(15,"Gargi",750); 
call proc_grade(14,"Vaishnavi",1200); 
call proc_grade(28,"Sarvesha",1132); 
select * from studmarks; 
select * from result; 
delimiter $ 
create function tot_stud(classname varchar(25)) 
returns int     -> begin     -> declare total int(20);     -> select distinct count(*) into total from result where class=classname;     -> return total;     -> end $ 
                     
delimiter ; 
select tot_stud("Second Class"); 
select tot_stud("Second Class"); 
select tot_stud("Pass"); 
select tot_stud("Distinction"); 
              
prac 6

create table o_rollcall(roll_no int,name varchar(20),address varchar(20)); 
create table n_rollcall(roll_no int,name varchar(20),address varchar(20)); 
insert into o_rollcall values('1','Saurabh','Mh');
insert into o_rollcall values('8','Samarth','krd'); 
insert into o_rollcall values('73','Pranali','ksr'); 
insert into o_rollcall values('15','Gargi','npr');
select * from o_rollcall; 
delimiter // 
delimiter // 
delimiter $ 
create procedure p3(in r1 int) 
begin     -> declare r2 int;     -> declare exit_loop boolean;     -> declare c1 cursor for select roll_no from o_rollcall     -> where roll_no>r1;     -> declare continue handler for not found set     -> exit_loop=true;     -> open c1;     -> e_loop:loop     -> fetch c1 into r2;     -> if not exists(select * from n_rollcall where roll_no=r2)     -> then     -> insert into n_rollcall select * from o_rollcall where roll_no=r2;     -> end if;     -> if exit_loop     -> then     -> close c1;     -> leave e_loop;     -> end if;     -> end loop e_loop;     -> end 
$
delimiter ;
 
call p3(3); 
select * from n_rollcall; 
call p3(8); 
call p3(73); 
select * from n_rollcall; 
select * from o_rollcall; 
     
     
prac 7

use plsql; 
create table borrower2(roll_no int,name varchar(20),date_of_issue date,book varchar(10)); 
insert into borrower2 values('1','Samarth','2022-01-23','dbms'); 
alter table borrower2 add status varchar(20); 
alter table borrower2 add author varchar(20); 
update  borrower2 
set author ='Julame mam',status='avl' 
-> where roll_no=1; 
select * from borrower2;
insert into borrower2 values('2','Pranali','2022-12-31','toc','navl','Kalshetti mam'); 
insert into borrower2 values('3','Saurabh','2022-08-24','hci','navl','Bhadagale sir'); 
insert into borrower2 values('4','Gargi','2022-11-2','cns','avl','Dongare sir'); 
insert into borrower2 values('5','Vaishnavi','2022-6-18','spos','avl','Sawant mam'); 
select * from borrower2; 
delimiter $ 
delimiter //
          
create trigger library after insert on borrower1 for 
each row 
-> begin 
-> insert into audit1 
-> values(new.roll_no,new.name,new.date_of_issue,new.book,new.status,new.author,curr ent_timestamp); 
-> end; 
-> // 
     
delimiter ; 
create table audit1(roll_no int,name varchar(10),date_of_issue date,book varchar(20),status varchar(10),author varchar(10),c_time TIMESTAMP); 
insert into borrower2 values('6','Shahuraj','2022-05-11','iot','navl','Pokale mam'); 
select * from audit1; 
select * from borrower2;
delimiter // 
create trigger library1 after update on borrower2 for 
each row 
-> begin 
-> insert into audit1 
-> values(new.roll_no,new.name,new.date_of_issue,new.book,new.status,new.author,curr ent_timestamp); 
-> end; 
-> // 
    
select * from audit1; '
// 
      
delimiter ; 
select *  from borrower2; 
update borrower2 
set roll_no=73,author='abc' 
-> where book='toc'; 
    
select *  from borrower2; 
select * from audit1; 
      
 
 
 
 MONGODB
 
 MongoDb practical 1: -
Creating database: 
Use database_name 

See the database : db 

Creating collection: - 
db.createCollection(‘Collection_Name ’)

deleting  complete collection: - 
db.collection_Name.drop() 

inserting in a collection: --
db.Collection_Name.insert({Name: ‘Prathmesh’, Roll: 4}) 

remove particular row: - 
db.Collection_Name.remove({Name: ‘Prathmesh’}) 

show entries in collection: -- 
db.Collection_Name.find().pretty() 

update operations: = 
1.	Set particular value:-
db.collection_Name.update({Name:’Prathmesh’}, {$set: {Roll:7}}) 
2.	Rename field name: -  
db.collection_Name.update({Name:’Prathmesh’}, {$rename: {Roll: ‘Roll_No’}}) 
3.	Increment operator-  
db.collection_Name.update({Name:’Prathmesh’}, {$inc: {Roll: 2}})  

logical operators: - 
1.	And: -
 db.collection_Name.find({$and: [{Name:’Prathmesh’},{Roll:2}]}) 
2.	OR
db.collection_Name.find({$or: {[{Name:’Prathmesh’},{Roll:2}]}) 

SAVE method:  
Db.collection_Name.save(_id: ObjectId(‘Object_id_here’), {Name: ‘Prathmesh’, roll:5})


MongoDb pr 2: -
1.	Indexing: - 
Creating index- 
Db.collection_name.createIndex({Name:1}) 
Show indexes: - 
Db.collection_name.getIndexes() 

Setting primary key in indexes: -
db.index.ensureIndex({roll:1},{unique:true}) 

and operation: -
db.index.remove({$and: [{Name: 'Tejas'}, {marks: 80}]}) 

2.	Aggreagtion:  

1.	Finding max marks:- 
db.Collection_Name.aggregate([{$group: {_id: '$Subject', Max_Marks: {$max: '$marks'}}}])
db.collection_name.aggregate([{$group: {_id: ‘subject’, Max_Marks: {$max: ‘$Marks’}}}])   


Mongodb Practical 3: -  
2 phases : -
Map – processes each document In the collection 
Reduce- combines the output of map operation
db.map_r.mapReduce(function() {emit(this.Name, this.Marks)}, function(key,value){return Array.avg(value)}, {out: 'MyOUTPUT'})
